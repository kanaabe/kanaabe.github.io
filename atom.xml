<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Snacks]]></title>
  <link href="http://blog.kanaabe.com/atom.xml" rel="self"/>
  <link href="http://blog.kanaabe.com/"/>
  <updated>2017-05-15T13:39:54+02:00</updated>
  <id>http://blog.kanaabe.com/</id>
  <author>
    <name><![CDATA[Kana Abe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Access Localhost on Your Phone]]></title>
    <link href="http://blog.kanaabe.com/blog/2017/05/15/how-to-access-localhost-on-your-phone/"/>
    <updated>2017-05-15T12:36:42+02:00</updated>
    <id>http://blog.kanaabe.com/blog/2017/05/15/how-to-access-localhost-on-your-phone</id>
    <content type="html"><![CDATA[<p>This post explains how to make localhost work on your mobile device.</p>

<!-- more -->


<p>Find the IP of your desktop machine. You can use <code>ifconfig</code> on mac to pull your public IP. Look for it in the <code>en0</code> section of the result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ifconfig
</span><span class='line'>en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
</span><span class='line'>  ether ---
</span><span class='line'>  inet6 ---
</span><span class='line'>  inet 1111.00.11.1 netmask 0xffffff00 broadcast 1111.00.11.2
</span><span class='line'>  nd6 ---
</span><span class='line'>  media: autoselect
</span><span class='line'>  status: active</span></code></pre></td></tr></table></div></figure>


<p>Make sure localhost is running, and that both your phone and browser are connected to the same network. Then, simply go to the IP address on your phone along with the port number. For example, if my IP is <code>1111.00.11.1</code> and my localhost is opening port 5000, go to <code>1111.00.11.1:5000</code> on your phone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Path to Becoming an Engineer]]></title>
    <link href="http://blog.kanaabe.com/blog/2016/08/11/my-path-to-becoming-an-engineer/"/>
    <updated>2016-08-11T00:48:00+02:00</updated>
    <id>http://blog.kanaabe.com/blog/2016/08/11/my-path-to-becoming-an-engineer</id>
    <content type="html"><![CDATA[<p>In 2009, when I was a 19 year old freshman, I saw Ed Catmull speak at UC Santa Cruz. Afterwards, I waited in line to talk to Ed and told him I wanted to do R&amp;D at Pixar. I asked him what I should major in. He said Art and Computer Science, so I did exactly that.</p>

<!-- more -->


<h3>College</h3>

<p>I spent a year at UC Santa Cruz and took a variety of classes like Linguistics and The History of Disney. It was the first time I was truly by myself, without my twin sister there by me. I lost a lot of focus then &ndash; I became depressed and paranoid by the end of the year and did too many drugs. I loved the people and the campus but it wasn&rsquo;t worth paying $26K a year.</p>

<p>My sophomore year I transferred to Rutgers University in New Jersey, my homestate. That sophomore year was also hard. It was the lowest point of my life so far for the depression for many reasons. I was trying to hold onto a long-term relationship from Santa Cruz that tore me apart. I brought with me a Santa Cruz mindset that didn&rsquo;t fit into the frat-heavy Rutgers. My close friend Goh had committed suicide that year. We were both new to Rutgers (himself a freshman) and we often used to talk about jazz, relationships, and life.</p>

<p>One enjoyable part of that year was being in Computer Science and Visual Art classes. The context switching was entertaining and it was fun being around both art and science nerds. Unfortunately I didn&rsquo;t find much overlap.</p>

<p>As a junior, I took Intro to Computer Graphics and I didn&rsquo;t love it, which was a let down considering I wanted to be in Computer Animation. However, I also took Imaging and Multimedia and that, I loved. I remember my fascination at how simple it was to apply a filter to an image based on image kernels. Since I was interested in R&amp;D, I asked that professor if I could work on any research in the Computer Vision department. I told him I would get back to him with an idea for a paper. One day a pattern emerged in my art history classes: all the courses were all structured linearlly. Monet&rsquo;s Impressionist style influenced Van Gogh and Post-Impressionism, which catapulted Cubism, Expressionism, and Dadaism, which projected Dali and Surrealism, etc etc. I propsed to Professor Elgammal the idea that maybe computers could do all this work and discover even more.</p>

<p>My senior year, I started working a lot on this research topic, and started to break down what elements of an artwork art historians might look at to determine where the influences might be hiding. It turns out that categorization of artwork is pretty important. To be able to determine what influences a painting, we should be able to categorize it first. Since art history is written by humans and is subjective anyway, I didn&rsquo;t see why computers couldn&rsquo;t try it.</p>

<p>The paper turned out to be pretty popular and people around the Internet wrote about it including the Sunday edition of The Washington Post. You can read more about it <a href="https://sites.google.com/site/digihumanlab/research/artistic-influence">here</a></p>

<p>In my art classes, I did a few Arduino projects and started a magazine called Trim with a friend. It was the complete opposite of the stuff I was doing in the CBIM labs. We were organizing photo shoots, contacting models, and trying to get people to everything for free. It was hard and there were a lot of late nights.</p>

<p>Overall my senior year was the most stressed I had ever been. I had to plan out every minute of my life including when I would have time to grab a bite, and if I should bring a toothbrush in case I pull an all-nighter in the library. I had a part-time job, the research project, TRIM magazine, social life, and I was trying to complete an intensive double major in three years. All my guidance counselors said I couldn&rsquo;t do it but I fucking did it.</p>

<h3>Sailthru</h3>

<p>After I graduated I took a month-long backpacking trip to Thailand and Cambodia with some friends. What a time that was! The friends I was travelling with all went to business school and had jobs lined up except for me. I ended up accepting a job at Sailthru while in Thailand, for better or for worse, as a Support Engineer in their Client Services team.</p>

<p>This job was nothing like I had expected. Everyday my job was the same. Pick up new tickets, email people back about their technical issues, and man the phone. About once a week I would be on call, which meant that I would have to answer client calls at 6AM if someone felt so inclined to set up a data feed as the sun rose. Corporate life there was fine &ndash; there were a fair amount of alcoholics and basic ladies but everyone was more or less friendly. I did get to do some technical things like set up complex templating conditionals and help people understand the API and data feeds. Whatever, it was a good introduction to the tech industry.</p>

<p>I got pretty tired of this job quickly, but I managed to stay a whole year. In the last months before I left were some dark times at Sailthru. Shit was just breaking everywhere &ndash; it was the curse of Robin Williams. After his death all our machines broke and the number of tickets spiked exponentially. We were struggling so hard and I remember feeling like there would be no end. At this point I felt like I paid my debt. I felt like I deserved more. So I left a month later.</p>

<p>The most applicable thing I learned was to treat your co-workers like you do your clients. I also confirmed that I wanted to be an engineer more than anything.</p>

<h3>The Flatiron School</h3>

<p>The path I desperately wanted to take was that of a software engineer at a company that involved art and that I cared for and believed in. It led me to The Flatiron School. What a wonderful place that was, and a great reset to my life. Fresh sneakers, new people, the lowest block on Broadway, and a topic that I enjoy. I echo these <a href="https://www.quora.com/What-is-your-review-of-Flatiron-School">thoughts</a> about FIS and I&rsquo;ll always be proud to say where I came from. Funny enough, all those Discrete Math and Linear Algebra classes in college really didn&rsquo;t do shit for me. Sure I was invested at the time, but I didn&rsquo;t come out of there feeling prepped for a software engineering job like I did out of FIS.</p>

<h3>Artsy</h3>

<p>My first choice company to work for was Artsy, since college. I asked Professor Elgammal if there are companies out there that do Art and Science. He said yes, look at Artsy! I was in love. Thanks to the conneX at FIS, I got to interview at Artsy. I remember going up to the 25th floor for the first time and thinking, &ldquo;This feels like heaven&rdquo;. No joke, I was so enamored. The next thing I knew I was deploying to production.</p>

<p>It&rsquo;s been a long journey since, and 1.5 years have passed since I started. In the beginnings I was a contributor to artsy.net and m.artsy.net, picked up issues, and deployed containable features. Craig then introduced me to Writer, a backend CMS for publishing articles all strapped with it&rsquo;s own API, database, and shiny React front-end. Eventually I took over it. Over the course of a year, Editorial grew tremendously in popularity, so a product team called Publishing was created.</p>

<p>We&rsquo;ve done a lot of cool features since, like this <a href="https://www.artsy.net/article/artsy-editorial-2015-the-year-in-art">Year in Art</a> package, this <a href="https://www.artsy.net/article/artsy-editorial-how-art-fairs-expanded-the-contemporary-art-market">UBS Series</a> about the art market, and <a href="https://github.com/artsy/positron/pull/772">my biggest PR yet</a> to name a few.</p>

<p>I&rsquo;m the solo engineer on this team, soon to be joined by an intern. I&rsquo;m currently trying to prepare for the new challenges of managing someone, while seeking new things to learn, like VR.</p>

<p>That&rsquo;s it for now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Every Day]]></title>
    <link href="http://blog.kanaabe.com/blog/2015/01/15/code-every-day/"/>
    <updated>2015-01-15T23:41:37+01:00</updated>
    <id>http://blog.kanaabe.com/blog/2015/01/15/code-every-day</id>
    <content type="html"><![CDATA[<p>Starting 2015, I wanted to write code every day. This meant making at least one meaningful open-source commit each day. It was inspired by John Resig in <a href="http://ejohn.org/blog/write-code-every-day/">this post</a>. All was going well, I felt confident, and submitted good code.</p>

<p>And then I broke it on January 3.</p>

<!-- more -->


<p>Just 6 days in (I started December 28) and I couldn&rsquo;t keep up with my grand plan. Needless to say I was embarrassed and thought this would be impossible. Well, it is. I mean it&rsquo;s <em>possible</em> to write code every day for the rest of your life but in a realistic life-setting, mistakes happen, life happens. <strong>You can&rsquo;t expect to form a concrete habit in one shot</strong>.</p>

<p>Just keep swimming. All I can ask of myself is that the next time I break the streak, it better be longer than 6 days and it <em>better</em> be for a good reason. My current streak is 12 days and I&rsquo;m feeling pretty happy. In fact, I&rsquo;m really proud of all the work that&rsquo;s been done in just 12 days.</p>

<p>I finished a game, I updated the look and feel of this blog, fixed a bunch of bugs that bothered me, started re-designing my boyfriend&rsquo;s portfolio site, and today I dug up my legacy portfolio site and started cleaning. <em>Oh, cleaning.</em> What a wonderful feeling to see terribly designed code and start cleaning.</p>

<p>One fear that&rsquo;s been coming up a lot is: what&rsquo;s going to happen when I start a new job? Ideally I&rsquo;ll be writing code every day at my job, but what about the weekends? Will I be too tired? What if my job doesn&rsquo;t have open-sourced projects? Look, I didn&rsquo;t sign a contract to do this - I&rsquo;m doing this to be a better coder. Right now, this is the best way I can think of to do that. <strong>It doesn&rsquo;t have to be forever, but it should be consistent for as long as it matters</strong>.</p>

<p>I&rsquo;ve been trying at this habit for about a month now and it&rsquo;s been a very therapeutic experience. I get excited to open up my computer and pick up where I left things, still fresh. I don&rsquo;t plan on stopping when I start a new job because I&rsquo;m feeling a lot of the positive side-effects that John Resig talks about in his post. I can&rsquo;t wait to hit that 1 year streak. It will happen, and it will happen naturally!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Social Icons With Font Awesome]]></title>
    <link href="http://blog.kanaabe.com/blog/2015/01/12/adding-social-icons-with-font-awesome/"/>
    <updated>2015-01-12T20:25:20+01:00</updated>
    <id>http://blog.kanaabe.com/blog/2015/01/12/adding-social-icons-with-font-awesome</id>
    <content type="html"><![CDATA[<p><a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a> is, well, pretty awesome. It provides you with fully scalable vector icons that can be customized with CSS. It&rsquo;s also free to use and very quick to get started with. Check out some of their icons <a href="http://fortawesome.github.io/Font-Awesome/icons/">here</a>.</p>

<h2>Download</h2>

<p>You can download the toolkit <a href="http://fortawesome.github.io/Font-Awesome/assets/font-awesome-4.2.0.zip">here</a> and add it to your project as an asset OR, just use their CDN.</p>

<!-- more -->


<p>Add the following code to the <code>&lt;head&gt;</code> of your page&rsquo;s HTML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>Using the icons is easy. The thing to keep in mind is that the icon lives in an <code>&lt;i&gt;</code> tag. You can choose icons by changing the value of the class attribute. The example below is a simple one, for the Twitter icon.</p>

<p><i class="fa fa-twitter"></i> fa-twitter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-twitter&quot;</span><span class="nt">&gt;&lt;/i&gt;</span> fa-twitter
</span></code></pre></td></tr></table></div></figure>


<h2>Making Social Icons</h2>

<p>You can easily combine different classes to form icons with circular, square, and inverted backgrounds. The example below shows three icons made by stacking icons on top of each other using the <code>fa-stack</code> class.</p>

<div class="social-icons">
    <a href="mailto:kanakoabe5@gmail.com"><span class="fa-stack fa-lg">
      <i class="fa fa-circle fa-stack-2x"></i>
      <i class="fa fa-envelope-o fa-stack-1x fa-inverse"></i>
    </span></a>
    <a href="http://twitter.com/kana_abe" target="_blank"><span class="fa-stack fa-lg">
      <i class="fa fa-circle fa-stack-2x"></i>
      <i class="fa fa-twitter fa-stack-1x fa-inverse"></i>
    </span></a>
    <a href="http://instagram.com/kanaabe" target="_blank"><span class="fa-stack fa-lg">
      <i class="fa fa-circle fa-stack-2x"></i>
      <i class="fa fa-instagram fa-stack-1x fa-inverse"></i>
    </span></a>
</div>


<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;social-icons&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;mailto:kanakoabe5@gmail.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;fa-stack fa-lg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-circle fa-stack-2x&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-envelope-o fa-stack-1x fa-inverse&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://twitter.com/kana_abe&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;fa-stack fa-lg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-circle fa-stack-2x&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-twitter fa-stack-1x fa-inverse&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://instagram.com/kanaabe&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;fa-stack fa-lg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-circle fa-stack-2x&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-instagram fa-stack-1x fa-inverse&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above shows how the icons are made. Each icon lives in an <code>&lt;a&gt;</code> tag which references my social outlets. The <code>&lt;span&gt;</code> tag contains two classes, the <code>fa-stack</code> which allows icons to be placed on top of each other, and the <code>fa-lg</code> class to control the sizing.</p>

<p>The individual <code>&lt;i&gt;</code> tags have the required <code>fa</code> class, the icon itself, and an <code>fa-stack-1x</code> or <code>fa-stack-2x</code> class. The difference between the last two classes changes depending on which icon is on top. The background icon (the circle in this case) should contain the <code>fa-stack-2x</code> class while the foreground, or the main icon should contain the <code>fa-stack-1x</code> class.</p>

<p>In this example, I also use the <code>fa-inverse</code> class on the main icons. This is because the circles are by default, colored, which means that placing a regular icon on top of it without &lsquo;fa-inverse&rsquo; will just result in a colored circle like this:</p>

<p><a href="http://instagram.com/kanaabe" target="_blank"><span class="fa-stack fa-lg">
      <i class="fa fa-circle fa-stack-2x"></i>
      <i class="fa fa-instagram fa-stack-1x"></i>
</span></a></p>

<p>The icon is there, but the color of the main icon is not inverted so it blends with the background color.</p>

<p>So far, I haven&rsquo;t had any problems with Font Awesome, especially since it&rsquo;s free to use. I spent hours looking for a set of pre-made icons on PSD files that could have worked, but I found that having control over the CSS and relying on the hosted icons worked best for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With SVG]]></title>
    <link href="http://blog.kanaabe.com/blog/2014/11/13/getting-started-with-svg/"/>
    <updated>2014-11-13T20:57:01+01:00</updated>
    <id>http://blog.kanaabe.com/blog/2014/11/13/getting-started-with-svg</id>
    <content type="html"><![CDATA[<p>Getting Started With SVG</p>

<p>Everyone seems to have at least some interest in data visualization lately. It’s pretty, it’s informative, and it makes us feel like we’re learning something without reading long lines of text. One of the most popular Javascript libraries for creating data visualizations are with D3.js.</p>

<p>D3 is built on top of these common standards:</p>

<ol>
<li>HTML</li>
<li>CSS</li>
<li>The DOM</li>
<li>SVG</li>
</ol>


<p>Before starting D3, we should be somewhat familiar with the concepts above. I’m pretty familiar with 1-3, so today I’m writing about.. SVG</p>

<!--more-->


<h2>What is SVG?</h2>

<p>SVG stands for ‘Scalable Vector Graphics’
A type of graphic component for the web
SVG is vector-based. (This means images SCALE nicely)
SVG is written in XML format
SVG can be directly embedded in HTML
CSS can apply to SVG elements!</p>

<p><svg width="120" height="120">
  <circle cx="60" cy="60" r="50" stroke="blue" stroke-width="2" fill="yellow" />
</svg></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;120&quot;</span> <span class="na">height=</span><span class="s">&quot;120&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;60&quot;</span> <span class="na">cy=</span><span class="s">&quot;60&quot;</span> <span class="na">r=</span><span class="s">&quot;50&quot;</span> <span class="na">stroke=</span><span class="s">&quot;blue&quot;</span> <span class="na">stroke-width=</span><span class="s">&quot;2&quot;</span> <span class="na">fill=</span><span class="s">&quot;yellow&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Breaking down the syntax:</h2>

<ul>
<li>Enclosed in an <code>&lt;svg&gt;&lt;/svg&gt;</code> tag</li>
<li>The width and height correspond to the image size</li>
<li>Create the circle with the <code>&lt;circle&gt;</code> tag</li>
<li>cx and cy refer to the ‘center x’ and ‘center y’ which places the circle’s middle relative to the image size. If you want the circle in the middle, cx and cy default to (0,0)</li>
<li>r refers to the circle’s radius</li>
<li>stroke,stroke-width,and fill are all visual properties to change the stroke and color</li>
</ul>


<h2>With CSS</h2>

<p><svg width="400" height="200">
  <rect width="400" height="200" style="fill:blue;stroke:pink;stroke-width:10;fill-opacity:0.1;stroke-opacity:0.9" />
</svg></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rect</span> <span class="na">width=</span><span class="s">&quot;400&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">style=</span><span class="s">&quot;fill:blue;stroke:pink;stroke-width:10;fill-opacity:0.1;stroke-opacity:0.9&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we’re using the rectangle tag. I used in-line CSS to demonstrate how we can pass in regular CSS definitions to set the element’s properties.</p>

<h2>Other elements:</h2>

<ul>
<li>Ellipse</li>
<li>Line</li>
<li>Polyline</li>
<li>Polygon</li>
<li>Path</li>
</ul>


<h2><code>&lt;g&gt;</code> tag</h2>

<p>One very important tag used a LOT in D3 is the <g> tag. This tag simply groups elements together. This is especially important in making transformations for D3.</p>

<p><svg>
    <g>
      <rect x="10" y="20" height="50" width="75"
          style="stroke: black; fill: yellow"/>
      <text x="10" y="90" style="stroke: black;">
        Following the shape..</text>
    </g>
</svg></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;g&gt;</span>
</span><span class='line'>      <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;10&quot;</span> <span class="na">y=</span><span class="s">&quot;20&quot;</span> <span class="na">height=</span><span class="s">&quot;50&quot;</span> <span class="na">width=</span><span class="s">&quot;75&quot;</span>
</span><span class='line'>          <span class="na">style=</span><span class="s">&quot;stroke: black; fill: yellow&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;10&quot;</span> <span class="na">y=</span><span class="s">&quot;90&quot;</span> <span class="na">style=</span><span class="s">&quot;stroke: black;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Following the shape..<span class="nt">&lt;/text&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/g&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><svg height="200">
    <g transform="rotate(45 50 50) translate(20 0)">
      <rect x="10" y="20" height="50" width="75"
          style="stroke: black; fill: yellow"/>
      <text x="10" y="90" style="stroke: black;">
        Following the shape..</text>
    </g>
</svg></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;svg</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;g</span> <span class="na">transform=</span><span class="s">&quot;rotate(45 50 50) translate(20 0)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;rect</span> <span class="na">x=</span><span class="s">&quot;10&quot;</span> <span class="na">y=</span><span class="s">&quot;20&quot;</span> <span class="na">height=</span><span class="s">&quot;50&quot;</span> <span class="na">width=</span><span class="s">&quot;75&quot;</span>
</span><span class='line'>          <span class="na">style=</span><span class="s">&quot;stroke: black; fill: yellow&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;text</span> <span class="na">x=</span><span class="s">&quot;10&quot;</span> <span class="na">y=</span><span class="s">&quot;90&quot;</span> <span class="na">style=</span><span class="s">&quot;stroke: black;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Following the shape..<span class="nt">&lt;/text&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/g&gt;</span>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice, the only change we made here is that I transformed the entire group. The important line here is <g transform="rotate(45 50 50) translate(20 0)"> in the opening g tag. It adds the rotation and translation to our SVG image.</p>

<p>YAY IT’S LINEAR ALGEBRA ALL OVER AGAIN!</p>

<p><svg height="400">
    <g transform="rotate(45 50 50) translate(50 0) scale(1.5)">
      <rect x="10" y="20" height="50" width="75"
          style="stroke: black; fill: yellow"/>
      <text x="10" y="90" style="stroke: black;">
        Following the shape..</text>
    </g>
</svg></p>

<p>Scale is a another transformation that might come in handy to you.</p>

<p>Let’s see what you can make!</p>

<p>third example courtesy of: <a href="http://tutorials.jenkov.com/svg/g-element.html">http://tutorials.jenkov.com/svg/g-element.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Nokogiri Saw]]></title>
    <link href="http://blog.kanaabe.com/blog/2014/10/16/the-nokogiri-saw/"/>
    <updated>2014-10-16T21:57:26+02:00</updated>
    <id>http://blog.kanaabe.com/blog/2014/10/16/the-nokogiri-saw</id>
    <content type="html"><![CDATA[<p>In Japanese, the term “nokogiri” refers to this:</p>

<p><img src="http://hsto.org/storage/habraeffect/11/8d/118d003d546a1fa1e240e1cc4dfb4a61.jpg" alt="Nokogiri Saw" /></p>

<p>It’s a saw used for cutting wood, but instead of making the cut on the “push” like a traditional European saw, the Nokogiri saw cuts on the “pull”.
Coming from a small <a href="sites.google.com/site/digihumanlab/research">background</a> in Data Science, my brain lit up as soon as I was introduced to this magical gem.</p>

<h2>Define the Problem</h2>

<p>After explaining to my boyfriend the concept of ‘scraping’, I asked him, “What do you want me to scrape for you?”
“I want to know how to title my Reddit posts so it catches the most attention.”
Great, problem defined.</p>

<!--more-->


<h2>Spec It Out</h2>

<p>Immediately I understand that solving this problem will take lots and lots of data and time. Therefore, the goal of this blog post is to lay out the foundation of a project that I can build on.</p>

<h2>Here It What I Know:</h2>

<ul>
<li>I want to scrape Reddit using Nokogiri</li>
<li>I want to retrieve the titles of each post</li>
<li>I want to use these titles and add them to some data structure I can iterate on</li>
<li>I want to find the most frequently used words</li>
<li>The Reddit RSS would be cool to use but I want to practice scraping.</li>
</ul>


<h2>Discover Issues</h2>

<p>One issue I encountered when trying to iterate through multiple pages is that the URL structure made no sense to me.</p>

<p>Page 1 - <a href="http://www.reddit.com/">http://www.reddit.com/</a></p>

<p>Page 2 - <a href="http://www.reddit.com/?count=25&amp;after=t3_2jg309">http://www.reddit.com/?count=25&amp;after=t3_2jg309</a></p>

<p>Page 3 - <a href="http://www.reddit.com/?count=50&amp;after=t3_2jg30w">http://www.reddit.com/?count=50&amp;after=t3_2jg30w</a></p>

<p>Page 4 - <a href="http://www.reddit.com/?count=75&amp;after=t3_2jgfto">http://www.reddit.com/?count=75&amp;after=t3_2jgfto</a></p>

<p>At first I figured that iterating through increments of 25 in the count parameter of the URL would work since each page contains 25 items.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;http://www.reddit.com/?count=&quot;</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">reddit</span> <span class="o">&lt;&lt;</span> <span class="n">scrape_titles</span><span class="p">(</span><span class="n">str</span><span class="o">+</span><span class="p">(</span><span class="n">count</span><span class="o">+</span><span class="mi">24</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">25</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This did not work. What ended up happening was that duplicate titles appeared in my array. In fact, no matter what value I inserted for count, it showed me the same page. It was clear that getting a static URL for “Page 2 of Reddit’s Front Page” was not available. Based on the URL and HTML, the ‘after’ parameter was checking the ID of the post and creating content based on that. The ‘count’ param was irrelavent.</p>

<h2>Continue Anyway..</h2>

<p>Instead of iterating through the front page titles, I decided to find the titles on the each of the Reddit subheading pages will do.</p>

<p><img src="http://content.screencast.com/users/kabesailthru/folders/Jing/media/80a85640-8525-490e-ac5e-66b869adda92/00000166.png" alt="Reddit" /></p>

<p>(Note: I excluded gilded, wiki, and promoted)
Below is the code I have for my scraper class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RedditScraper</span>
</span><span class='line'>  <span class="vc">@@reddit</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="no">PAGES</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;/new/&quot;</span><span class="p">,</span><span class="s2">&quot;/rising/&quot;</span><span class="p">,</span><span class="s2">&quot;/controversial/&quot;</span><span class="p">,</span><span class="s2">&quot;/top/&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize_all_titles</span>
</span><span class='line'>    <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;http://www.reddit.com&quot;</span>
</span><span class='line'>    <span class="no">PAGES</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span>
</span><span class='line'>      <span class="vc">@@reddit</span> <span class="o">&lt;&lt;</span> <span class="n">scrape_titles</span><span class="p">(</span><span class="n">str</span><span class="o">+</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vc">@@reddit</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scrape_titles</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">str</span><span class="p">))</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">=[]</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;a.title&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">title</span><span class="o">|</span>
</span><span class='line'>      <span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="n">title</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">arr</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running RedditScraper.new.initialize_all_titles returns an Array with all my title names. Awesome!
Here is a sample of my output so far</p>

<p><img src="http://content.screencast.com/users/kabesailthru/folders/Jing/media/4ce3c544-0f71-4bec-b463-7e0a19b0f55c/00000168.png" alt="Results" /></p>

<p>Next I need to analyze this data. What I really want to do is to find the frequency of each of the words to see “what’s trending” right now. I created a class called RedditAnalyzer which allows me to do this.
Lets iterate through our titles array, graciously given to us by RedditScraper, find individual words, and keep a frequency count each time I come across this word.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RedditAnalyzer</span>
</span><span class='line'>  <span class="vc">@@frequency</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="n">scraper</span> <span class="o">=</span> <span class="no">RedditScraper</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">initialize_all_titles</span>
</span><span class='line'>    <span class="n">add</span><span class="p">(</span><span class="n">scraper</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#binding.pry</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">title</span><span class="o">|</span>
</span><span class='line'>      <span class="n">title</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>        <span class="n">word</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[,.\[\]&#39;?!-\&quot;]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="vc">@@frequency</span><span class="o">[</span><span class="n">word</span><span class="o">]</span>
</span><span class='line'>          <span class="vc">@@frequency</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">=</span> <span class="vc">@@frequency</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="vc">@@frequency</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two more functions I decided to add are below. delete_common is called from top_20 and removes the 100 most common words in the English language. The top_20 function prints out the top 20 most frequently used words.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">top_20</span>
</span><span class='line'>    <span class="n">delete_common</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="vc">@@frequency</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span><span class="p">}</span>
</span><span class='line'>    <span class="n">sorted</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span><span class="n">ind</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2"> with frequency </span><span class="si">#{</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">ind</span> <span class="o">&lt;=</span><span class="mi">19</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_common</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;resources/common_words.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>      <span class="n">text</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="o">.</span><span class="n">chop</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vc">@@frequency</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">text</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>        <span class="vc">@@frequency</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AND FINALLY..THE TOP 20 MOST FREQUENT WORDS USED IN A TITLE ON REDDIT AT 3:41AM ON 10/17:</h2>

<p>i with frequency 18</p>

<p>not with frequency 10</p>

<p>til with frequency 6</p>

<p>‘-’ with frequency 5</p>

<p>why with frequency 5</p>

<p>using with frequency 5</p>

<p>just with frequency 4</p>

<p>man with frequency 4</p>

<p>ebola with frequency 4</p>

<p>good with frequency 4</p>

<p>best with frequency 4</p>

<p>only with frequency 4</p>

<p>18 with frequency 3</p>

<p>while with frequency 3</p>

<p>million with frequency 3</p>

<p>travel with frequency 3</p>

<p>guy with frequency 3</p>

<p>sick with frequency 3</p>

<p>don’t with frequency 3</p>

<p>eli5: with frequency 3</p>

<h2>“TIL: WHY 18 MILLION DON’T TRAVEL WHILE MAN IS SICK WITH EBOLA”</h2>

<p>Maybe I should create some bots next…</p>

<p>Full repo: <a href="https://github.com/kanaabe/scraping_reddit">https://github.com/kanaabe/scraping_reddit</a></p>

<h2>TODO LIST</h2>

<ul>
<li>get rid of that ‘-’ word</li>
<li>add visualization using another Ruby gem</li>
<li>possibly add more ‘common words’</li>
<li>refactor some methods from above, I was being hasty.</li>
</ul>

]]></content>
  </entry>
  
</feed>
